#!/usr/bin/env ruby
require "rubygems"
require 'fileutils'
require 'yaml'

module Giternal
  class YamlConfig
    def initialize(base_dir, yaml_string)
      @base_dir = base_dir
      @config_hash = YAML.load yaml_string
    end

    def each_repo
      repositories.each { |r| yield(r) if block_given? }
    end

    def find_repo(path)
      @config_hash.each do |name, attributes|
        if path == File.join(attributes["path"], name)
          return Repository.new(@base_dir, name, attributes["repo"], attributes["path"])
        end
      end
      return nil
    end

    private
    def repositories
      @config_hash.map do |name, attributes|
        Repository.new(@base_dir, name, attributes["repo"], attributes["path"])
      end
    end
  end  


  class Repository
    class << self
      attr_accessor :verbose
    end
    attr_accessor :verbose

    def initialize(base_dir, name, repo_url, rel_path)
      @base_dir = base_dir
      @name = name
      @repo_url = repo_url
      @rel_path = rel_path
      @verbose = self.class.verbose
    end

    def update
      git_ignore_self

      return true if frozen?
      FileUtils.mkdir_p checkout_path unless File.exist?(checkout_path)
      if checked_out?
        if !File.exist?(repo_path + '/.git')
          raise "Directory '#{@name}' exists but is not a git repository"
        else
          update_output { `cd #{repo_path} && git pull 2>&1` }
        end
      else
        update_output { `cd #{checkout_path} && git clone #{@repo_url} #{@name}` }
      end
      true
    end

    def freezify
      return true if frozen? || !checked_out?

      Dir.chdir(repo_path) do
        `tar czf .git.frozen.tgz .git`
         FileUtils.rm_r('.git')
      end
      `cd #{@base_dir} && git add -f #{rel_repo_path}`
      true
    end

    def unfreezify
      return true unless frozen?

      Dir.chdir(repo_path) do
        `tar xzf .git.frozen.tgz`
        FileUtils.rm('.git.frozen.tgz')
      end
      `cd #{@base_dir} && git rm -r --cached #{rel_repo_path}`
      true
    end

    def frozen?
      File.exist?(repo_path + '/.git.frozen.tgz')
    end

    def checked_out?
      File.exist?(repo_path)
    end

    private
    def checkout_path
      File.expand_path(File.join(@base_dir, @rel_path))
    end

    def repo_path
      File.expand_path(checkout_path + '/' + @name)
    end

    def rel_repo_path
      @rel_path + '/' + @name
    end

    def update_output(&block)
      puts "Updating #{@name}" if verbose
      block.call
      puts " ..updated\n" if verbose
    end

    def git_ignore_self
      Dir.chdir(@base_dir) do
        contents = File.read('.gitignore') if File.exist?('.gitignore')

        unless contents.to_s.include?(rel_repo_path)
          File.open('.gitignore', 'w') do |file|
            if contents
              file << contents
              file << "\n" unless contents[-1] == 10 # ascii code for \n
            end
            file << rel_repo_path << "\n"
          end
        end
      end
    end
  end


  class App
    def initialize(base_dir)
      @base_dir = base_dir
    end

    def update(*dirs)
      if dirs.empty?
        config.each_repo {|r| r.update }
      else
        dirs.each do |dir|
          if repo = config.find_repo(dir)
            repo.update
          end
        end
      end
    end

    def freezify(*dirs)
      if dirs.empty?
        config.each_repo {|r| r.freezify }
      else
        dirs.each do |dir|
          if repo = config.find_repo(dir)
            repo.freezify
          end
        end
      end
    end

    def unfreezify(*dirs)
      if dirs.empty?
        config.each_repo {|r| r.unfreezify }
      else
        dirs.each do |dir|
          if repo = config.find_repo(dir)
            repo.unfreezify
          end
        end
      end
    end

    def run(action, *args)
      case action
      when "freeze"
        freezify(*args)
      when "unfreeze"
        unfreezify(*args)
      else
        send(action, *args)
      end
    end

    def config
      return @config if @config

      config_file = ['config/giternal.yml', '.giternal.yml'].detect do |file|
        File.file? File.expand_path(@base_dir + '/' + file)
      end

      if config_file.nil?
        $stderr.puts "config/giternal.yml is missing"
        exit 1
      end

      @config = YamlConfig.new(@base_dir, File.read(config_file))
    end
  end


end






action = ARGV[0]
available_actions = %w(update freeze unfreeze)
unless available_actions.include?(action)
  puts "Usage: giternal (#{available_actions.join(':')})"
  puts ""
#  puts File.read(File.dirname(__FILE__) + '/../README.rdoc')
  exit 1
end

Giternal::Repository.verbose = true
app = Giternal::App.new(FileUtils.pwd)
app.run(*ARGV)
